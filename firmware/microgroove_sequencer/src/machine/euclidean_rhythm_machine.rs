/// Machine which generates Euclidean rhythms.
use super::Machine;
use crate::{
    machine_resources::MachineResources,
    param::{Param, ParamList},
    Sequence,
};

use alloc::boxed::Box;

#[rustfmt::skip]
const EUCLIDEAN_LUT: [u32; 1024] = [
    0b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10, 0b11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100, 0b110, 0b111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000, 0b1010, 0b1110, 0b1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000, 0b10100, 0b10101, 0b11110, 0b11111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000, 0b100100, 0b101010, 0b110110, 0b111110, 0b111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000, 0b1001000, 0b1010100, 0b1010101, 0b1101101, 0b1111110, 0b1111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000, 0b10001000, 0b10010010, 0b10101010, 0b10110110, 0b11101110, 0b11111110, 0b11111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000, 0b100010000, 0b100100100, 0b101010100, 0b101010101, 0b110110110, 0b111011101, 0b111111110, 0b111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000, 0b1000010000, 0b1001001000, 0b1010010100, 0b1010101010, 0b1010110101, 0b1101101101, 0b1111011110, 0b1111111110, 0b1111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000, 0b10000100000, 0b10001000100, 0b10010010010, 0b10101010100, 0b10101010101, 0b10110110110, 0b11011101110, 0b11110111101, 0b11111111110, 0b11111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000000, 0b100000100000, 0b100010001000, 0b100100100100, 0b101001010010, 0b101010101010, 0b101011010110, 0b110110110110, 0b111011101110, 0b111110111110, 0b111111111110, 0b111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000000, 0b1000001000000, 0b1000100010000, 0b1001001001000, 0b1001010010100, 0b1010101010100, 0b1010101010101, 0b1011010110101, 0b1101101101101, 0b1110111011101, 0b1111101111101, 0b1111111111110, 0b1111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000000, 0b10000001000000, 0b10000100001000, 0b10010001001000, 0b10010010010010, 0b10101001010100, 0b10101010101010, 0b10101011010101, 0b10110110110110, 0b11011011101101, 0b11101111011110, 0b11111101111110, 0b11111111111110, 0b11111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000000000, 0b100000010000000, 0b100001000010000, 0b100010001000100, 0b100100100100100, 0b101001010010100, 0b101010101010100, 0b101010101010101, 0b101011010110101, 0b110110110110110, 0b110111011101110, 0b111101111011110, 0b111111011111101, 0b111111111111110, 0b111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000000000, 0b1000000010000000, 0b1000010000100000, 0b1000100010001000, 0b1001001001001000, 0b1001001010010010, 0b1010100101010010, 0b1010101010101010, 0b1010101101010110, 0b1011011010110110, 0b1101101101101101, 0b1110111011101110, 0b1111011110111101, 0b1111111011111110, 0b1111111111111110, 0b1111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000000000, 0b10000000100000000, 0b10000010000010000, 0b10001000100010000, 0b10010001001000100, 0b10010010010010010, 0b10100101001010010, 0b10101010101010100, 0b10101010101010101, 0b10101101011010110, 0b10110110110110110, 0b11011011101101110, 0b11101110111011101, 0b11110111110111110, 0b11111110111111101, 0b11111111111111110, 0b11111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000000000000, 0b100000000100000000, 0b100000100000100000, 0b100010000100010000, 0b100010010001001000, 0b100100100100100100, 0b100101001010010100, 0b101010100101010100, 0b101010101010101010, 0b101010101101010101, 0b101101011010110101, 0b110110110110110110, 0b110111011011101101, 0b111011101111011101, 0b111110111110111110, 0b111111110111111110, 0b111111111111111110, 0b111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000000000000, 0b1000000001000000000, 0b1000001000001000000, 0b1000010000100001000, 0b1000100010001000100, 0b1001001001001001000, 0b1001001010010010100, 0b1010010101001010100, 0b1010101010101010100, 0b1010101010101010101, 0b1010110101011010101, 0b1011011010110110101, 0b1101101101101101101, 0b1101110111011101110, 0b1110111101111011110, 0b1111101111101111101, 0b1111111101111111101, 0b1111111111111111110, 0b1111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000000000000, 0b10000000001000000000, 0b10000001000000100000, 0b10000100001000010000, 0b10001000100010001000, 0b10010010001001001000, 0b10010010010010010010, 0b10100101001010010100, 0b10101010010101010010, 0b10101010101010101010, 0b10101010110101010110, 0b10101101011010110101, 0b10110110110110110110, 0b11011011011101101101, 0b11101110111011101110, 0b11110111101111011110, 0b11111011111101111110, 0b11111111101111111110, 0b11111111111111111110, 0b11111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000000000000000, 0b100000000010000000000, 0b100000010000001000000, 0b100001000010000100000, 0b100010001000100010000, 0b100100010010001001000, 0b100100100100100100100, 0b100101001001010010010, 0b101010010101001010100, 0b101010101010101010100, 0b101010101010101010101, 0b101010110101011010101, 0b101101011011010110110, 0b110110110110110110110, 0b110110111011011101101, 0b111011101110111011101, 0b111101111011110111101, 0b111111011111101111110, 0b111111111011111111101, 0b111111111111111111110, 0b111111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000000000000000, 0b1000000000010000000000, 0b1000000100000010000000, 0b1000010000010000100000, 0b1000100001000100001000, 0b1000100010010001000100, 0b1001001001001001001000, 0b1001001001010010010010, 0b1010010100101001010010, 0b1010101010010101010100, 0b1010101010101010101010, 0b1010101010110101010101, 0b1010110101101011010110, 0b1011011011010110110110, 0b1101101101101101101101, 0b1101110111011011101110, 0b1110111011110111011110, 0b1111011110111110111101, 0b1111110111111011111101, 0b1111111111011111111110, 0b1111111111111111111110, 0b1111111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000000000000000, 0b10000000000100000000000, 0b10000000100000001000000, 0b10000010000010000010000, 0b10000100010000100010000, 0b10001000100010001000100, 0b10010010001001001000100, 0b10010010010010010010010, 0b10010100101001010010100, 0b10101001010100101010010, 0b10101010101010101010100, 0b10101010101010101010101, 0b10101011010101101010110, 0b10110101101011010110101, 0b10110110110110110110110, 0b11011011011101101101110, 0b11011101110111011101110, 0b11101111011101111011101, 0b11110111110111110111110, 0b11111101111111011111110, 0b11111111110111111111101, 0b11111111111111111111110, 0b11111111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0b100000000000000000000000, 0b100000000000100000000000, 0b100000001000000010000000, 0b100000100000100000100000, 0b100001000010000100001000, 0b100010001000100010001000, 0b100100010010001001000100, 0b100100100100100100100100, 0b100100101001001010010010, 0b101001010010101001010010, 0b101010101001010101010010, 0b101010101010101010101010, 0b101010101011010101010110, 0b101011010110101011010110, 0b101101101011011010110110, 0b110110110110110110110110, 0b110110111011011101101110, 0b111011101110111011101110, 0b111011110111101111011110, 0b111110111110111110111110, 0b111111101111111011111110, 0b111111111110111111111110, 0b111111111111111111111110, 0b111111111111111111111111, 0, 0, 0, 0, 0, 0, 0, 0,
    0b1000000000000000000000000, 0b1000000000001000000000000, 0b1000000010000000100000000, 0b1000001000001000001000000, 0b1000010000100001000010000, 0b1000100010001000100010000, 0b1000100100010010001001000, 0b1001001001001001001001000, 0b1001001001010010010010100, 0b1010010100101001010010100, 0b1010100101010100101010100, 0b1010101010101010101010100, 0b1010101010101010101010101, 0b1010101101010101101010101, 0b1010110101101011010110101, 0b1011011011010110110110101, 0b1101101101101101101101101, 0b1101110110111011011101101, 0b1110111011101110111011101, 0b1111011110111101111011110, 0b1111101111101111101111101, 0b1111111011111110111111101, 0b1111111111101111111111101, 0b1111111111111111111111110, 0b1111111111111111111111111, 0, 0, 0, 0, 0, 0, 0,
    0b10000000000000000000000000, 0b10000000000001000000000000, 0b10000000010000000010000000, 0b10000010000001000001000000, 0b10000100001000010000100000, 0b10001000100001000100010000, 0b10001000100100010001001000, 0b10010010010001001001001000, 0b10010010010010010010010010, 0b10010100101001001010010100, 0b10100101010010101001010100, 0b10101010101001010101010100, 0b10101010101010101010101010, 0b10101010101011010101010101, 0b10101101010110101011010101, 0b10110101101011011010110101, 0b10110110110110110110110110, 0b11011011011011101101101101, 0b11011101110110111011101101, 0b11101110111011110111011101, 0b11110111101111011110111101, 0b11111011111011111101111101, 0b11111110111111110111111110, 0b11111111111101111111111110, 0b11111111111111111111111110, 0b11111111111111111111111111, 0, 0, 0, 0, 0, 0,
    0b100000000000000000000000000, 0b100000000000010000000000000, 0b100000000100000000100000000, 0b100000010000001000000100000, 0b100001000001000010000010000, 0b100010000100010000100010000, 0b100010001000100010001000100, 0b100100010010010001001001000, 0b100100100100100100100100100, 0b100100101001001010010010100, 0b101001010010100101001010010, 0b101010100101010100101010100, 0b101010101010101010101010100, 0b101010101010101010101010101, 0b101010101101010101101010101, 0b101011010110101101011010110, 0b101101101011011010110110101, 0b110110110110110110110110110, 0b110110111011011011101101101, 0b110111011101110111011101110, 0b111011101111011101111011101, 0b111101111011111011110111110, 0b111110111111011111101111110, 0b111111110111111110111111110, 0b111111111111011111111111101, 0b111111111111111111111111110, 0b111111111111111111111111111, 0, 0, 0, 0, 0,
    0b1000000000000000000000000000, 0b1000000000000010000000000000, 0b1000000001000000001000000000, 0b1000000100000010000001000000, 0b1000001000010000010000100000, 0b1000010000100010000100001000, 0b1000100010001000100010001000, 0b1001000100100010010001001000, 0b1001001001001001001001001000, 0b1001001001001010010010010010, 0b1001010010100101001010010100, 0b1010100101010010101001010100, 0b1010101010100101010101010010, 0b1010101010101010101010101010, 0b1010101010101101010101010110, 0b1010101101010110101011010101, 0b1011010110101101011010110101, 0b1011011011011010110110110110, 0b1101101101101101101101101101, 0b1101101110110111011011101101, 0b1110111011101110111011101110, 0b1110111101111011101111011110, 0b1111011111011110111110111101, 0b1111110111111011111101111110, 0b1111111101111111101111111101, 0b1111111111111011111111111110, 0b1111111111111111111111111110, 0b1111111111111111111111111111, 0, 0, 0, 0,
    0b10000000000000000000000000000, 0b10000000000000100000000000000, 0b10000000001000000000100000000, 0b10000001000000100000010000000, 0b10000010000010000010000010000, 0b10000100001000010000100001000, 0b10001000100010001000100010000, 0b10001001000100010010001000100, 0b10010010010001001001001000100, 0b10010010010010010010010010010, 0b10010100100101001001010010010, 0b10100101001010100101001010100, 0b10101010010101010010101010010, 0b10101010101010101010101010100, 0b10101010101010101010101010101, 0b10101010110101010110101010110, 0b10101101011010101101011010101, 0b10110101101101011011010110110, 0b10110110110110110110110110110, 0b11011011011011101101101101110, 0b11011101101110111011011101110, 0b11101110111011101110111011101, 0b11101111011110111101111011110, 0b11110111110111110111110111110, 0b11111101111110111111011111101, 0b11111111011111111101111111110, 0b11111111111110111111111111101, 0b11111111111111111111111111110, 0b11111111111111111111111111111, 0, 0, 0,
    0b100000000000000000000000000000, 0b100000000000000100000000000000, 0b100000000010000000001000000000, 0b100000010000000100000010000000, 0b100000100000100000100000100000, 0b100001000010000100001000010000, 0b100010001000010001000100001000, 0b100010001000100100010001000100, 0b100100100010010010001001001000, 0b100100100100100100100100100100, 0b100100101001001001010010010010, 0b101001010010100101001010010100, 0b101010010101001010100101010010, 0b101010101010100101010101010100, 0b101010101010101010101010101010, 0b101010101010101101010101010101, 0b101010110101011010101101010110, 0b101011010110101101011010110101, 0b101101101011011011010110110110, 0b110110110110110110110110110110, 0b110110110111011011011101101101, 0b110111011101110110111011101110, 0b111011101110111101110111011110, 0b111101111011110111101111011110, 0b111110111110111110111110111110, 0b111111011111101111111011111101, 0b111111111011111111101111111110, 0b111111111111110111111111111110, 0b111111111111111111111111111110, 0b111111111111111111111111111111, 0, 0,
    0b1000000000000000000000000000000, 0b1000000000000001000000000000000, 0b1000000000100000000010000000000, 0b1000000010000000100000001000000, 0b1000001000001000001000001000000, 0b1000010000100001000010000100000, 0b1000100001000100001000100001000, 0b1000100010001000100010001000100, 0b1001000100100010010001001000100, 0b1001001001001001001001001001000, 0b1001001001001010010010010010100, 0b1001010010100100101001010010010, 0b1010010101001010010101001010010, 0b1010101001010101010010101010100, 0b1010101010101010101010101010100, 0b1010101010101010101010101010101, 0b1010101011010101010110101010101, 0b1010110101011010110101011010110, 0b1011010110101101101011010110110, 0b1011011011011010110110110110101, 0b1101101101101101101101101101101, 0b1101101110110111011011101101110, 0b1101110111011101110111011101110, 0b1110111011110111011110111011110, 0b1111011110111101111011110111101, 0b1111101111101111101111101111101, 0b1111110111111101111111011111110, 0b1111111110111111111011111111101, 0b1111111111111101111111111111101, 0b1111111111111111111111111111110, 0b1111111111111111111111111111111, 0,
    0b10000000000000000000000000000000, 0b10000000000000001000000000000000, 0b10000000000100000000001000000000, 0b10000000100000001000000010000000, 0b10000010000001000001000000100000, 0b10000100001000001000010000100000, 0b10000100010000100010000100010000, 0b10001000100010001000100010001000, 0b10001001000100100010010001001000, 0b10010010010010001001001001001000, 0b10010010010010010010010010010010, 0b10010010100100101001001010010010, 0b10100101001010010100101001010010, 0b10101001010100101010100101010010, 0b10101010101010010101010101010010, 0b10101010101010101010101010101010, 0b10101010101010110101010101010110, 0b10101011010101101010101101010110, 0b10101101011010110101101011010110, 0b10110110101101101011011010110110, 0b10110110110110110110110110110110, 0b11011011011011011101101101101101, 0b11011101101110110111011011101101, 0b11101110111011101110111011101110, 0b11101111011101111011101111011101, 0b11110111101111011111011110111101, 0b11111011111011111101111101111110, 0b11111110111111101111111011111110, 0b11111111101111111111011111111110, 0b11111111111111101111111111111110, 0b11111111111111111111111111111110, 0b11111111111111111111111111111111
];

#[derive(Debug)]
pub struct EuclideanRhythmMachine {
    params: ParamList,
}

impl EuclideanRhythmMachine {
    pub fn new() -> EuclideanRhythmMachine {
        EuclideanRhythmMachine {
            params: ParamList::from_slice(&[
                Box::new(Param::new_number_param("NOTES", 1, 32, 3)),
                Box::new(Param::new_number_param("ROTATE", 0, 31, 0)),
            ])
            .expect("should create euclidean rhythm machine param list from slice"),
        }
    }

    fn process(sequence: Sequence, notes: u8, rotate: u8) -> Sequence {
        let steps = sequence.len();
        let notes = (notes as usize).min(steps);
        let address = ((steps - 1) * 32) + (notes - 1);
        let pattern_bits = EUCLIDEAN_LUT[address];
        let active_steps = (0..sequence.len()).map(|i| (pattern_bits >> (steps - i - 1)) & 1 == 1);
        let rotate = rotate % steps as u8;
        sequence
            .mask_steps(active_steps)
            .rotate_right(rotate.into())
    }
}

impl Machine for EuclideanRhythmMachine {
    fn name(&self) -> &str {
        "EUCLID"
    }

    fn params(&self) -> &ParamList {
        &self.params
    }

    fn params_mut(&mut self) -> &mut ParamList {
        &mut self.params
    }

    fn generate(&mut self, _machine_resources: &mut MachineResources) {}

    fn apply(&self, sequence: Sequence) -> Sequence {
        let notes = self.params[0]
            .value()
            .try_into()
            .expect("unexpected notes param for EuclideanRhythmMachine");
        let rotate = self.params[1]
            .value()
            .try_into()
            .expect("unexpected rotate param for EuclideanRhythmMachine");
        Self::process(sequence, notes, rotate)
    }
}

unsafe impl Send for EuclideanRhythmMachine {}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::sequence_generator::SequenceGenerator;

    #[test]
    fn euclidean_rhythm_machine_should_smash_out_euclidean_bangers_like_it_is_not_a_thing() {
        let machine = EuclideanRhythmMachine::new();
        let output_sequence = machine.apply(SequenceGenerator::initial_sequence(8));
        let active_steps: Vec<bool> = output_sequence.iter().map(|opt| opt.is_some()).collect();
        assert_eq!(
            active_steps,
            [true, false, false, true, false, false, true, false]
        );
    }
}
